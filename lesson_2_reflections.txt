-What happens when you initialize a repository? Why do you need to do it?

After running git init, the directory I am working in becomes a repository.
The files are untracked but part of the repository.
We need to init a git in order to make the present working directory
 a repository.

-How is the staging area different from the working directory and the
 repository? What value do you think it offers?

The staging area works like a cache at an intermediate stage between the git
repository and the working directory.
These files in the staging area are files that are waiting to be committed
yet has not been.
The value the staging area give us is that offer us an option to reset and
cancel any commit we need to make before adding the files and commit it
to the repository.

-How can you use the staging area to make sure you have one commit per logical
change?

By adding files to the staging area, you have a chance to review your files
as part of a same logical unit to be commit to the repository, or whether
there need to be some changes done before the commit.

-What are some situations when branches would be helpful in keeping your
history organized? How would branches help?

branches would be helpful in situations where you want to experiment with different
code and maybe add experimental features and checkout how they are working
together, all without affecting the master branch of the repository.
This way by branching at different stages of your repository history,
you can know exactly when that experimental feature or code was added, without
affecting the main master branch.

-How do the diagrams help you visualize the branch structure?
By having a diagram, one can easily find omitted commits that are left out from 
the git commit history.

-What is the result of merging two branches together?
Why do we represent it in the diagram the way we do?

By merging two branches together we make them part of the same master branch. Hence the master branch will combine two codes into a single code file in a master branch.
We represent it in a diagram as a master commit with parents pointing out to the two previous HEAD commit of those two branches.
This master branch has a reference to both its parents and thus has a history
of both branches' commit history and log

-What are the pros and cons of Gitâ€™s automatic merging vs. always doing merges manually?

The pros of automatic merging is that git takes care of all the merging that doesn't result in conflict and add them together tidly.
The cons of manual merging is that it will become tedious work going through thousands of lines of code and merge them together manually. This is taken
care of by git. Whenever a conflict arises, git will inform the user of such conflict. Doing a git diff will locate the conflict and it could be easily fixed
manually.
